/*
 * targetSections.lsf -- Default section description
 *
 * Copyright (C) 1982-2014 HighTec EDV-Systeme GmbH.
 */

SECTIONS
{
  /*
   * The startup code should be placed where the CPU expects it after a reset,
   * so we try to locate it first, no matter where it appears in the list of
   * objects and libraries (note: because the wildcard pattern doesn't match
   * directories, we'll try to find crt0.o in various (sub)directories).
   */
  .startup :
  {
    KEEP (*(.startup_code))
    . = ALIGN(8);
  } > CODE_MEM =0

  /*
   * Allocate trap table.
   */
  .traptab  : FLAGS(axl)
  {
    *(.traptab)
    . = ALIGN(8);
  } > CODE_MEM

  /*
   * Allocate space for absolute addressable sections; this requires that
   * "int_dram" starts at a TriCore segment (256M) and points to
   * some RAM area!  If these conditions are not met by your particular
   * hardware setup, you should either not use absolute data, or you
   * must move .zdata*,.zbss*,.bdata*,.bbss* input sections to some appropriate
   * memory area.
   */
 .zbss  : ALIGN(8) FLAGS(awz)
  {
    ZBSS_BASE = .;
    *(.zbss)
    *(.zbss.*)
    *(.gnu.linkonce.zb.*)
    . = ALIGN(8);
    ZBSS_END = .;
  } > ZDATA_MEM
  .zdata  : ALIGN(8) FLAGS(awzl)
  {
    ZDATA_BASE = .;
    *(.zrodata)
    *(.zrodata.*)
    *(.zdata)
    *(.zdata.*)
    *(.gnu.linkonce.z.*)
    *(.gnu.linkonce.zr.*)
    . = ALIGN(8);
    ZDATA_END = .;
  } > ZDATA_MEM AT> CODE_MEM

  /*
   * Allocate .text and other read-only sections.
   */
  .init  : ALIGN(8) FLAGS(axl)
  {
    KEEP (*(.init))
    KEEP (*(.fini))
    . = ALIGN(8);
  } > CODE_MEM =0

  .text  : ALIGN(8) FLAGS(axl)
  {
    *(.text)
    *(.text.*)
    *(.pcp_c_ptr_init)
    *(.pcp_c_ptr_init.*)
    *(.gnu.linkonce.t.*)
    /*
     * .gnu.warning sections are handled specially by elf32.em.
     */
    *(.gnu.warning)
    . = ALIGN(8);
  } > CODE_MEM =0

  .rodata   : ALIGN(8) FLAGS(arl)
  {
    *(.rodata)
    *(.rodata*)
    *(.gnu.linkonce.r.*)
    *(.toc)
    . = ALIGN(8);
  } > CODE_MEM

  /*
   * Create the clear and copy tables that tell the startup code
   * which memory areas to clear and to copy, respectively.
   */
  .clear_sec : ALIGN(8) FLAGS(arl)
  {
    PROVIDE(__clear_table = .);
    LONG(0 + ADDR(.bss));          LONG(SIZEOF(.bss));
    LONG(0 + ADDR(.sbss));         LONG(SIZEOF(.sbss));
    LONG(0 + ADDR(.zbss));         LONG(SIZEOF(.zbss));
    LONG(-1);                      LONG(-1);
  } > CODE_MEM
  .copy_sec  : ALIGN(8) FLAGS(arl)
  {
    PROVIDE(__copy_table = .);
    LONG(LOADADDR(.data));         LONG(0 + ADDR(.data));         LONG(SIZEOF(.data));
    LONG(LOADADDR(.sdata));        LONG(0 + ADDR(.sdata));        LONG(SIZEOF(.sdata));
    LONG(LOADADDR(.zdata));        LONG(0 + ADDR(.zdata));        LONG(SIZEOF(.zdata));
    LONG(LOADADDR(.pcpdata));      LONG(0 + ADDR(.pcpdata));      LONG(SIZEOF(.pcpdata));
    LONG(LOADADDR(.pcptext));      LONG(0 + ADDR(.pcptext));      LONG(SIZEOF(.pcptext));
    LONG(LOADADDR(.internalcode)); LONG(0 + ADDR(.internalcode)); LONG(SIZEOF(.internalcode));
    LONG(-1);                      LONG(-1);                      LONG(-1);
  } > CODE_MEM

  .sdata2  : ALIGN(8) FLAGS(arsl)
  {
    *(.sdata.rodata)
    *(.sdata.rodata.*)
    *(*.sdata2)
    *(*.srodata*)
    *(.gnu.linkonce.sr.*)
    . = ALIGN(8);
  } > CODE_MEM

  /*
   * C++ exception handling tables.  NOTE: gcc emits .eh_frame
   * sections when compiling C sources with debugging enabled (-g).
   * If you can be sure that your final application consists
   * exclusively of C objects (i.e., no C++ objects), you may use
   * the -R option of the "strip" and "objcopy" utilities to remove
   * the .eh_frame section from the executable.
   */
  .eh_frame  :
  {
    *(.gcc_except_table)
    __EH_FRAME_BEGIN__ = .;
    KEEP (*(.eh_frame))
    __EH_FRAME_END__ = .;
    . = ALIGN(8);
  } > CODE_MEM

  .jcr  :
  {
     KEEP (*(.jcr))
  } > CODE_MEM

  /*
   * Constructors and destructors.
   */
  .ctors : FLAGS(al)
  {
    __CTOR_LIST__ = .;
    LONG((__CTOR_END__ - __CTOR_LIST__) / 4 - 2);
    /* gcc uses crtbegin.o to find the start of
       the constructors, so we make sure it is
       first.  Because this is a wildcard, it
       doesn't matter if the user does not
       actually link against crtbegin.o; the
       linker won't look for a file to match a
       wildcard.  The wildcard also means that it
       doesn't matter which directory crtbegin.o
       is in.  */
    KEEP (*crtbegin.o(.ctors))
    /* We don't want to include the .ctor section from
       from the crtend.o file until after the sorted ctors.
       The .ctor section from the crtend file contains the
       end of ctors marker and it must be last */
    KEEP (*(EXCLUDE_FILE (*crtend.o ) .ctors))
    KEEP (*(SORT(.ctors.*)))
    KEEP (*(.ctors))
    LONG(0);
    __CTOR_END__ = .;
    . = ALIGN(8);
  } > CODE_MEM
  .dtors : FLAGS(al)
  {
    __DTOR_LIST__ = .;
    LONG((__DTOR_END__ - __DTOR_LIST__) / 4 - 2);
    KEEP (*crtbegin.o(.dtors))
    KEEP (*(EXCLUDE_FILE (*crtend.o ) .dtors))
    KEEP (*(SORT(.dtors.*)))
    KEEP (*(.dtors))
    LONG(0);
    __DTOR_END__ = .;
    . = ALIGN(8);
  } > CODE_MEM

  /*
   * We're done now with the text part of the executable.  The
   * following sections are special in that their initial code or
   * data (if any) must also be stored in said text part of an
   * executable, but they "live" at completely different addresses
   * at runtime -- usually in RAM areas.  NOTE: This is not really
   * necessary if you use a special program loader (e.g., a debugger)
   * to load a complete executable consisting of code, data, BSS, etc.
   * into the RAM of some target hardware or a simulator, but it *is*
   * necessary if you want to burn your application into non-volatile
   * memories such as EPROM or FLASH.
   */
  .pcptext : ALIGN(8) FLAGS(axpl)
  {
    PCODE_BASE = .;
    *(.pcptext)
    *(.pcptext.*)
    . = ALIGN(8);
    PCODE_END = .;
  } > PCP_CODE AT> CODE_MEM
  .pcpdata : ALIGN(8) FLAGS(awpl)
  {
    PRAM_BASE = .;
    *(.pcpdata)
    *(.pcpdata.*)
    . = ALIGN(8);
    PRAM_END = .;
  } > PCP_DATA AT> CODE_MEM

  /*
   * Allocate space for internal code sections.
   */
  .internalcode  : ALIGN(8) FLAGS(axl)
  {
    *(.internalcode)
    *(.internalcode.*)
    . = ALIGN(8);
  } > ICODE_MEM AT> CODE_MEM =0

  .data : ALIGN(8) FLAGS(awl)
  {
    DATA_BASE = .;
    *(.data)
    *(.data.*)
    *(.gnu.linkonce.d.*)
    SORT(CONSTRUCTORS)
    . = ALIGN(8);
    DATA_END = .;
  } > DATA_MEM AT> CODE_MEM

  .sdata  : ALIGN(8) FLAGS(awsl)
  {
    SDATA_BASE = .;
    PROVIDE(__sdata_start = .);
    *(.sdata)
    *(.sdata.*)
    *(.gnu.linkonce.s.*)
    . = ALIGN(8);
  } > SDATA_MEM AT> CODE_MEM

  .sbss  : ALIGN(8) FLAGS(aws)
  {
    PROVIDE(__sbss_start = .);
    *(.sbss)
    *(.sbss.*)
    *(.gnu.linkonce.sb.*)
    . = ALIGN(8);
  } > SDATA_MEM

  /*
   * Allocate space for BSS sections.
   */
  .bss  : ALIGN(8) FLAGS(aw)
  {
    BSS_BASE = .;
    *(.bss)
    *(.bss.*)
    *(.gnu.linkonce.b.*)
    *(COMMON)
    . = ALIGN(8);
  } > BSS_MEM

  /* define the CSA Memory area as an own section
   * this section will be allocated into the internal RAM
   * after the absolute addressable sections .zdata/.zbss
   */
  .csa  : ALIGN(64) FLAGS(aw)
  {
    __CSA_BEGIN = .;
    . +=  __CSA_SIZE;
    __CSA_END = .;
  } > CSA_MEM
  __CSA_SIZE = __CSA_END - __CSA_BEGIN;

  .stack  : ALIGN(8) FLAGS(aw)
  {
    __ISTACK = . + __ISTACK_SIZE;
    __USTACK = __ISTACK + __USTACK_SIZE;
    __HEAP = __USTACK;
  } > BSS_MEM
  PROVIDE(__HEAP_END = ORIGIN(BSS_MEM) + LENGTH(BSS_MEM));
  _end = __HEAP_END;
  PROVIDE(end = _end);
  _. = ASSERT((__HEAP_END - __HEAP) >= __HEAP_MIN, "Available heap size is less then the required minimum size.");

  /*
   * Allocate interrupt vector table.
   * (locate it here to avoid large gaps because of alignment restrictions)
   */
  .inttab  : FLAGS(axl)
  {
    *(.inttab)
    . = ALIGN(8);
  } > CODE_MEM


  /* Make sure CSA, stack and heap addresses are properly aligned.  */
  _. = ASSERT ((__CSA_BEGIN & 0x3f) == 0 , "illegal CSA start address");
  _. = ASSERT ((__CSA_SIZE & 0x3f) == 0 , "illegal CSA size");
  _. = ASSERT ((__ISTACK & 7) == 0 , "ISTACK not doubleword aligned");
  _. = ASSERT ((__USTACK & 7) == 0 , "USTACK not doubleword aligned");
  _. = ASSERT ((__HEAP_END & 7) == 0 , "HEAP not doubleword aligned");

  /* Define a default symbol for address 0.  */
  NULL = DEFINED (NULL) ? NULL : 0;

  /*
   * Optional sections that may only appear when relocating.
   */
  /*
   * Optional sections that may appear regardless of relocating.
   */
  .version_info    0 : { *(.version_info) }
}

/* Include debug sections description */
INCLUDE debugSections.lsf